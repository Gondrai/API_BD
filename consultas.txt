● Consulta simples usando somente o básico SELECT, FROM, WHERE.

SELECT * 
	FROM sistema.ator 
	WHERE primeiro_nome = 'Emma';

● Consulta usando LIKE
-- SELECIONA O FILME QUANDO O TITULO TEM O COMEÇO IGUAL A 'Bir', NÃO DIFEERENCIA MAIÚSCULAS E MINUSCÚLAS.
SELECT * 
	FROM sistema.filme 
	WHERE titulo ILIKE 'Bir%';

-- SELECIONAR O ATOR CUJO SOBRENOME TERMINA COM n, FAZ DISTINÇÃO ENTRE MAIÚSCULAS E MINUSCÚLAS.
SELECT *
    FROM sistema.ator
    WHERE sobrenome LIKE '%n'

● Consulta usando operadores de conjuntos

-- SElECIONA USUÁRIOS COMUNS DO SEXO FEMINO COM IDADE IGUAL A 22 ANOS.
SELECT primeiro_nome, e_mail, idade
	FROM sistema.usuario_comum
	WHERE sexo = 'F'
	INTERSECT 
	SELECT primeiro_nome, e_mail, idade
	FROM sistema.usuario_comum
	WHERE idade = 22;	

-- SELECIONA USUÁRIOS COMUNS MASCULINOS QUE POSSUEM ID MAIOR QUE 10.
SELECT  e_mail, telefone, id_usuario_comum
	FROM sistema.usuario_comum
	WHERE sexo = 'M'
	EXCEPT 
	SELECT e_mail, telefone, id_usuario_comum
	FROM sistema.usuario_comum
	WHERE id_usuario_comum <= 10;


● Consulta usando um JOIN
-- SELECIONA O ALBUM E AUTOR DA TRILHA SONORA, E O NOME DOS FILMES OS QUAIS A TRILHA SONORA PERTENCE
SELECT t.album,t.autor, f.titulo, f.subtitulo
	FROM sistema.trilha_sonora t 
    INNER JOIN sistema.filme f 
    USING (id_filme);

● Consulta usando mais de um JOIN

-- SELECIONA O NOME E SOBRENOME DO ATOR E O TITULO E SUBTITULO DO FILME QUE PARTICIPA
SELECT a.primeiro_nome, a.sobrenome, f.titulo, f.subtitulo
	FROM sistema.ator a
	INNER JOIN sistema.rel_papel_ator_filme
	USING (id_ator)
	INNER JOIN sistema.filme f
	USING (id_filme);

● Consulta usando OUTER JOIN
-- SELECIONA O TITULO DO FILME, NOTA E CONTEUDO DA AVALIAÇÃO 
-- MESMO QUE O FILME NÃO POSSUA UMA

SELECT f.titulo, a.nota, a.conteudo
	FROM sistema.filme f
	LEFT JOIN sistema.avaliacao a
	USING (id_filme);

-- SELECIONA TODAS AS NOTAS DAS AVALIAÇÕES, 
-- MESMO QUE NÃO TENHAM SIDO ESTABELECIDAS POR USUÁRIOS COMUNS

SELECT u.primeiro_nome, u.e_mail, a.nota
	FROM sistema.usuario_comum u
	RIGHT JOIN sistema.avaliacao a
	USING (id_usuario_comum);

● Consulta usando função de agregação

-- SELECIONA MÉDIA DE IDADES DOS USUÁRIOS COMUNS
SELECT AVG(idade)
	FROM sistema.usuario_comum;

-- SELECIONA A NOTA MÁXIMA PARA UM FILME, SOMENTE QUANDO É AVALIADO POR USUÁRIO POR USUÁRIOS COMUNS
SELECT MAX(nota)
	FROM sistema.avaliacao
	WHERE id_usuario_comum IS NOT NULL;

-- SELECIONA A SOMA DOS ATORES DA TABELA ATOR QUE ATUAM NO FILME 'La la land'
SELECT COUNT(id_ator)
	FROM sistema.ator a
	INNER JOIN sistema.rel_papel_ator_filme r
	USING (id_ator)
	INNER JOIN sistema.filme f
	USING (id_filme) WHERE f.titulo ILIKE 'La la land';

-- SELECIONA A MENOR NOTA PARA O FILME 'A Saga Crepúsculo: Eclipse' E INFORMA 
-- O NOME DO CRÍTICO PLATAFORMA QUE DEU ESSA NOTA
SELECT MIN(nota), c.nome
	FROM sistema.critico_plataforma c
	INNER JOIN sistema.avaliacao a
	USING (id_critico_plataforma)
	INNER JOIN sistema.filme f
	USING (id_filme) WHERE f.titulo ILIKE 'A Saga Crepúsculo: Eclipse'
	GROUP BY c.nome;


-- CONCATENA TODOS OS TITULOS DOS FILMES SEPARADOS POR UMA VIRGULA
SELECT STRING_AGG(titulo, ', ' ORDER BY titulo ASC) AS nomes_filmes
	FROM sistema.filme;

● Consulta usando GROUP BY

-- FAZ A CONTA DA QUANTIDADE DE FILMES DO id_diretor

SELECT COUNT(f.id_filme) AS qntd_filmes, d.primeiro_nome, d.sobrenome
	FROM sistema.filme f
	INNER JOIN sistema.diretor d 
	USING (id_diretor)
	GROUP BY d.primeiro_nome, d.sobrenome;

● Consulta usando GROUP BY e HAVING

-- SELECIONA O TITULO DO FILME E CALCULA A MÉDIA DE NOTAS
-- DOS USUÁRIOS COMUNS, QUANDO TEM A MÉDIA <= 7
SELECT f.titulo, AVG(a.nota) as media_notas
	FROM sistema.avaliacao a
	INNER JOIN sistema.filme f
	USING (id_filme) 
	WHERE a.id_usuario_comum IS NOT NULL
	GROUP BY a.nota, f.titulo
	HAVING AVG(nota) <= 7 ;

● Consulta usando operador IN
-- SELECIONA OS FILMES QUANDO O GÊNERO FOR ROMANCE OU DRAMA
SELECT titulo, subtitulo, sinopse
	FROM sistema.filme WHERE id_genero IN( 5, 4);  -- 5: romance, 4: drama
	
● Consulta usando operador EXISTS

-- SELECIONA OS ATORES QUANDO ELES TÊM AO MENOS UM PRÊMIO
SELECT a.primeiro_nome, a.sobrenome, a.id_premios
	FROM sistema.ator a
	WHERE EXISTS 
	(SELECT 1 FROM sistema.premios p
	 WHERE p.id_premios = a.id_premios);

● Consulta usando operador SOME

-- SELECIONA O PRIMEIRO NOME, SOBRENOME E IDADE DO USUÁRIO COMUM QUANDO A IDADE É MAIOR QUE AO MENOS UM DOS VALORES INDICADOS
SELECT primeiro_nome, sobrenome, idade
	FROM sistema.usuario_comum
	WHERE idade > SOME (ARRAY[21, 25, 30]);

● Consulta usando operador ALL


● Consulta aninhadas no FROM

-- SELECIONA O NOME DO FILME E A QUANTIDADE DE STREAMINGS QUE POSSUEM O FILME
SELECT f.titulo , streaming.qtd_streaming
	FROM sistema.filme f
	JOIN (
		SELECT id_filme, COUNT(*) AS qtd_streaming
		FROM sistema.streaming
		GROUP BY id_filme
	) AS streaming
	USING (id_filme);
